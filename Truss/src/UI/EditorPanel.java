/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.RepaintManager;
import truss.Joint;
import truss.JointButton;
import truss.Member;


/**
 *
 * @author Wislo
 */

class PointerListener extends MouseAdapter{
    EditorPanel panel;
    
    
    public PointerListener(EditorPanel panel){
        this.panel = panel;
    }
    @Override
    public void mouseClicked(MouseEvent e){
        panel.clickDetected(e.getX(),e.getY());
    }
}



public class EditorPanel extends javax.swing.JPanel {
    private CreateTruss trussGenerator;
    private ButtonPanel btnPanel;
    private ImageIcon[] icons;
    
    //ArrayList<JointButton> jointButtons = new ArrayList<>();
    
    public boolean isAddingMember;
    
    private Joint[] connectedMember;
    private int currentMemberJoints;
    
    
    /*
    Icons:
    0 - Pinned Support
    1 - Roller Support
    */
    
    public EditorPanel(CreateTruss trussGenerator) {
        initComponents();
        this.isAddingMember = false;
        this.currentMemberJoints = 0;
        this.trussGenerator = trussGenerator;
        this.connectedMember = new Joint[2];
        this.addMouseListener(new PointerListener(this));
    }
    
    protected void clickDetected(int x, int y){
        
        int selection = btnPanel.getCurrentSelection();
        
        switch (selection){
            case 0: {
                placeJoint(x,y);
            } break;
            case 1: {
                System.out.println("Please select "+ (2-currentMemberJoints)+ " joints.");
                
            } break;
            
            case 2:{
                
                //place pinned support icon (label)
            } break;
            case 3:{
                
                //place roller support icon (label)
            }break;
            default:{
                //nothing selected
            }break;
            
        }
    }
    
    private void placeJoint(int x, int y){
        Joint joint = new Joint(x,y);
        trussGenerator.addJoint(joint);
        addJointButton(x+joint.OFFSET,y+joint.OFFSET,joint);
        trussGenerator.repaint();
    }
    
    private void addJointButton(int x, int y, Joint joint){
        JointButton btn = new JointButton(x,y);
        add(btn);
        //this.jointButtons.add(btn);
        btn.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
                if(isAddingMember){
                    
                    connectedMember[currentMemberJoints] = joint;
                    System.out.println("Tapped "+joint.getName());
                    currentMemberJoints++;
                    System.out.println("Please select "+ (2-currentMemberJoints)+ " joints.");

                    if(currentMemberJoints==2){
                        attachMember();
                    }
                    
                    
                }
                   
            }       
            
        });
    }
    
    @Override
    public void paintComponent(Graphics g){
        for (Joint joint : trussGenerator.getAddedJoints()) {
            joint.draw(g);
        }
        
        for (Member member : trussGenerator.getAddedMembers()) {
            member.draw(g);
        }
        //Add others
        
    }
    
    protected void attachMember(){
        Member m = new Member(connectedMember[0],connectedMember[1]);
        trussGenerator.addMember(m);
        connectedMember = new Joint[2];
        currentMemberJoints = 0;
        trussGenerator.repaint();
    }
    
    public void addButtonPanel(ButtonPanel btnpanel){
        this.btnPanel = btnpanel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents

    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
